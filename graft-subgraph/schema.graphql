enum Status {
  """
  The submission doesn't have a pending status.
  """
  None
  """
  The submission is in the state where it can be vouched for and crowdfunded.
  """
  Vouching
  """
  The submission is in the state where it can be challenged, or accepted to the list, if there are no challenges within the time limit.
  """
  PendingRegistration
  """
  The submission is in the state where it can be challenged, or removed from the list, if there are no challenges within the time limit.
  """
  PendingRemoval
}

enum Reason {
  """
  No reason specified. This option should be used to challenge removal requests.
  """
  None
  """
  The submission does not comply with the submission rules.
  """
  IncorrectSubmission
  """
  The submitter has existed but does not exist anymore.
  """
  Deceased
  """
  The submitter is already registered. The challenger has to point to the identity already registered or to a duplicate submission.
  """
  Duplicate
  """
  The submitter is not real. For example, this can be used for videos showing computer generated persons.
  """
  DoesNotExist
}

enum RequestType {
  """
  This is a request to add a profile to the registry
  """
  Registration
  """
  This is a removal request
  """
  Removal
}

type MetaEvidence @entity {
  """
  The meta evidence ID.
  """
  id: ID!
  """
  The URI of the meta evidence file.
  """
  URI: String!
}

type Contract @entity {
  """
  The singleton entity's ID, "0".
  """
  id: ID!
  """
  Proof of Humanity contract address
  """
  address: Bytes!
  """
  The arbitrator contract's address.
  """
  arbitrator: Bytes!
  """
  Extra data to require particular dispute and appeal behaviour.
  """
  arbitratorExtraData: Bytes!
  """
  The address that can make governance changes to the parameters of the contract.
  """
  governor: Bytes!
  """
  The base deposit to make a new request for a submission.
  """
  submissionBaseDeposit: BigInt!
  """
  The base deposit to challenge a request.
  """
  submissionChallengeBaseDeposit: BigInt!
  """
  Time after which the registered submission will no longer be considered registered. The submitter has to reapply to the list to refresh it.
  """
  submissionDuration: BigInt!
  """
  Denotes the point in time of the submission period after which it becomes possible for the submission to reapply (to refresh the duration of the submission period).
  """
  renewalTime: BigInt!
  """
  The time after which a request becomes executable if not challenged. Note that this value should be less than the time spent on potential dispute's resolution, to avoid complications of parallel dispute handling.
  """
  challengePeriodDuration: BigInt!
  """
  The number of registered users that have to vouch for a new registration request in order for it to enter `Status.PendingRegistration` status.
  """
  requiredNumberOfVouches: BigInt!
  """
  The number of times the meta evidence has been updated. Used to track the latest meta evidence ID.
  """
  metaEvidenceUpdates: BigInt!
  """
  Multiplier for calculating the fee stake that must be paid in a case where the arbitrator refused to arbitrate.
  """
  sharedStakeMultiplier: BigInt!
  """
  Multiplier for calculating the fee stake paid by the party that won the previous round.
  """
  winnerStakeMultiplier: BigInt!
  """
  Multiplier for calculating the fee stake paid by the party that lost the previous round.
  """
  loserStakeMultiplier: BigInt!
  """
  The current registration meta evidence.
  """
  registrationMetaEvidence: MetaEvidence
  """
  The current clearing meta evidence.
  """
  clearingMetaEvidence: MetaEvidence
}

type Submission @entity {
  """
  The creation time.
  """
  creationTime: BigInt!
  """
  The submission's address.
  """
  id: ID!
  """
  The current status of the submission.
  """
  status: Status!
  """
  Whether the submission is in the registry or not.
  """
  registered: Boolean!
  """
  The time when the submission was accepted to the list.
  """
  submissionTime: BigInt
  """
  The name of the submission.
  """
  name: String!
  """
  Submissions the submission has vouched for.
  """
  vouchees: [Submission!]!
  """
  The vouchee that entered `Status.PendingRegistration` status and is using the submission's vouch.
  """
  usedVouch: Submission
  """
  Submissions that have vouched for this submission. Note that vouches given by signature are added when the submission enters `Status.PendingRegistration`.
  """
  vouchesReceived: [Submission!]!
  """
  Number of vouches received.
  """
  vouchesReceivedLength: BigInt!
  """
  True if a dispute was raised. Note that the submission can enter disputed state multiple times, once per reason.
  """
  disputed: Boolean!
  """
  The submission's status change requests.
  """
  requests: [Request!]! @derivedFrom(field: "submission")
  """
  The submission's number of requests.
  """
  requestsLength: BigInt!
  """
  True if this submission was part of the seeding event.
  """
  seeded: Boolean!
  """
  True if this submission has been removed.
  """
  removed: Boolean!
  """
  The resolution time of the most recent request.
  """
  latestRequestResolutionTime: BigInt!
}

type Request @entity {
  """
  The creation time.
  """
  creationTime: BigInt!
  """
  The submission the request is for.
  """
  submission: Submission!
  """
  The request's ID, keccak256(submissionID, submissionRequestsLength).
  """
  id: ID!
  """
  The request index.
  """
  requestIndex: BigInt!
  """
  True if a dispute was raised. Note that the request can enter disputed state multiple times, once per reason.
  """
  disputed: Boolean!
  """
  Time when the submission's status was last updated. It's used to track when the challenge period ends.
  """
  lastStatusChange: BigInt!
  """
  True if the request is executed and/or all raised disputes are resolved.
  """
  resolved: Boolean!
  """
  Address that made the request. It matches the submission's ID in registration requests.
  """
  requester: Bytes!
  """
  The arbitrator trusted to resolve disputes for the request.
  """
  arbitrator: Bytes!
  """
  The extra data for the trusted arbitrator of the request.
  """
  arbitratorExtraData: Bytes!
  """
  The submissions that vouched for the request.
  """
  vouches: [Submission!]!
  """
  Stores all reasons that were used to challenge the request, to make sure that each reason was only used once.
  """
  usedReasons: [Reason!]!
  """
  Current reason the registration request was challenged with. It's left empty for removal requests.
  """
  currentReason: Reason!
  """
  Tracks the number of simultaneously raised disputes. Parallel disputes are only allowed for `Reason.Duplicate`.
  """
  nbParallelDisputes: BigInt!
  """
  Address of the challenger who won a dispute, and who users, that vouched for the request, must pay fines to.
  """
  ultimateChallenger: Bytes
  """
  True if the requester has already had a dispute that wasn't ruled in his favor.
  """
  requesterLost: Boolean!
  """
  Stores the index of the last processed vouch in the array of vouches. It's used for partial processing of the vouches in resolved requests.
  """
  penaltyIndex: BigInt!
  """
  The meta evidence for the request.
  """
  metaEvidence: MetaEvidence!
  """
  True if the request is for registration.
  """
  registration: Boolean!
  """
  The evidence for the request.
  """
  evidence: [Evidence!]! @derivedFrom(field: "request")
  """
  The request's number of evidence.
  """
  evidenceLength: BigInt!
  """
  The challenges for the request.
  """
  challenges: [Challenge!]! @derivedFrom(field: "request")
  """
  The ID of the last challenge, which is equal to the total number of challenges for the request
  """
  lastChallengeID: BigInt!
  """
  The request type
  """
  type: RequestType!
  """
  The time the request was resolved.
  """
  resolutionTime: BigInt!
  """
  True if vouch was not processed and vouchee is resolved.
  """
  vouchReleaseReady: Boolean!
}

type Evidence @entity {
  """
  The creation time.
  """
  creationTime: BigInt!
  """
  The request the evidence is for.
  """
  request: Request!
  """
  The evidence's ID, keccak256(requestID, "Evidence-" + requestEvidenceLength).
  """
  id: ID!
  """
  The URI of the evidence file.
  """
  URI: String!
  """
  The address of the sender.
  """
  sender: Bytes!
}

type Challenge @entity {
  """
  The creation time.
  """
  creationTime: BigInt!
  """
  The request the challenge is for.
  """
  request: Request!
  """
  The challenge's ID, keccak256(requestID, "Challenge-" + challengeIndex).
  """
  id: ID!
  """
  The challenge's reason.
  """
  reason: Reason
  """
  The challenge's dispute ID.
  """
  disputeID: BigInt
  """
  The address of the requesterd.
  """
  requester: Bytes
  """
  The address of the challenger.
  """
  challenger: Bytes
  """
  The submission which is a supposed duplicate of the challenged submission. This is only used for `Reason.Duplicate`.
  """
  duplicateSubmission: Submission
  """
  The final ruling.
  """
  ruling: BigInt
  """
  The rounds for the challenge.
  """
  rounds: [Round!]! @derivedFrom(field: "challenge")
  """
  The IDs of the rounds of this challenge.
  """
  roundIDs: [String!]!
  """
  The ID of the last round.
  """
  lastRoundID: BigInt!
  """
  In-contract challenge ID
  """
  challengeID: BigInt!
  """
  Start and end appeal period [start, end].
  """
  appealPeriod: [BigInt!]!
}

type Round @entity {
  """
  The creation time.
  """
  creationTime: BigInt!
  """
  The challenge the round is for.
  """
  challenge: Challenge!
  """
  The round's ID, keccak256(challengeID, roundIndex).
  """
  id: ID!
  """
  Tracks the fees paid by each side in the round.
  """
  paidFees: [BigInt!]!
  """
  True for a side when it has fully paid its fee. False otherwise.
  """
  hasPaid: [Boolean!]!
  """
  Sum of reimbursable fees and stake rewards available to the parties that made contributions to the side that ultimately won.
  """
  feeRewards: BigInt!
  """
  The contributions for the round.
  """
  contributions: [Contribution!]! @derivedFrom(field: "round")
  """
  The IDs of the contributions of this round.
  """
  contributionIDs: [String!]!
  """
  The number of contributions made to this round.
  """
  contributionsLength: BigInt!
}

type Contribution @entity {
  """
  The creation time.
  """
  creationTime: BigInt!
  """
  The round the contribution is for.
  """
  round: Round!
  """
  The contribution's ID, keccak256(roundID, contributor).
  """
  id: ID!
  """
  The address of the contributor.
  """
  contributor: Bytes!
  """
  The contributions for each side.
  """
  values: [BigInt!]!
  """
  The request receiving the contribution.
  """
  requestIndex: BigInt!
  """
  The round receiving the contribution.
  """
  roundIndex: BigInt!
  """
  Whether the request is resolved
  """
  requestResolved: Boolean!
}

type Counter @entity {
  """
  The singleton entity's ID, "1".
  """
  id: ID!
  """
  Number of submissions in the Vouching Phase
  """
  vouchingPhase: BigInt!
  """
  Number of submissions Pending Registration
  """
  pendingRegistration: BigInt!
  """
  Number of submissions Pending Removal
  """
  pendingRemoval: BigInt!
  """
  Number of submissions with Challenged Registration
  """
  challengedRegistration: BigInt!
  """
  Number of submissions with Challenged Removal
  """
  challengedRemoval: BigInt!
  """
  Number of submissions Registered
  """
  registered: BigInt!
  """
  Number of submissions Expired
  """
  expired: BigInt!
  """
  Number of submissions Removed
  """
  removed: BigInt!
}

type SubmissionsRegistry @entity {
  id: ID!
  """
  List of all current submissions
  """
  currentSubmissions: [Submission!]!
  """
  List of all expired submissions
  """
  expiredSubmissions: [Submission!]!
}

type _Schema_
  @fulltext(
    name: "submissionSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Submission", fields: [{ name: "name" }] }]
  )
